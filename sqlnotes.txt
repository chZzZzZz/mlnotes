public static SqlConnection conn = new SqlConnection("server=.;database=MColor;uid=" + entername + ";pwd=" + entercode);//链接数据库
//显示总数据库表
            SqlDataAdapter adapter_All = new SqlDataAdapter("select * from SourceData", QuanJu.conn);//连接数据库//SourceData为数据库中的表格
            DataSet set_All = new DataSet();
            adapter_All.Fill(set_All, "conn");
            dGV_All.ReadOnly = false;
            dGV_All.DataSource = set_All.Tables[0];
			
===============================数据库表的创建和管理================================================
//新建数据库语句（在查询分析器里执行）
IF EXISTS (SELECT name FROM master.dbo.sysdatabases WHERE name = 'studb' )
	DROP DATABASE studb
GO

CREATE DATABASE studb ON
    (NAME='studb_data.dat',
     FILENAME='D:\Microsoft SQL Server\MSSQL\Data\studb_data.mdf',
     SIZE = 5,
     MAXSIZE = 10,
     FILEGROWTH = 1)
LOG ON
     (NAME='studb_log.log',
     FILENAME='D:\Microsoft SQL Server\MSSQL\Data\studb_log.ldf',
     SIZE = 1,
     FILEGROWTH = 10%)
	 //在数据库studb中新建表并设置主键和外键
	 use studb//定位到studb数据库
CREATE TABLE S
     (SNO CHAR(6)  PRIMARY KEY,
     SNAME CHAR(8)  NOT NULL,
     AGE SMALLINT,
     SEX CHAR(1),
     DNAME VARCHAR(12));

CREATE TABLE C
     (CNO CHAR(2) NOT NULL,
     CNAME VARCHAR(24) NOT NULL,
     CREDIT SMALLINT,
     PRE_CNO CHAR(2),
     PRIMARY KEY(CNO));

CREATE TABLE SC
     (SNO CHAR(6) NOT NULL,
      CNO CHAR(2) NOT NULL,
      SCORE SMALLINT,
      PRIMARY KEY(SNO,CNO),
      FOREIGN KEY(SNO)
                  REFERENCES S ON DELETE CASCADE,
      FOREIGN KEY(CNO)
                  REFERENCES C ON DELETE NO ACTION)
//为数据库的表增加列和删除列
alter table s add guest varchar(16)
alter table s drop column guest 
//为表撤销主键和补充主键
alter table sc drop constraint  PK_SC
alter table sc add constraint PK_SC PRIMARY KEY (SNO,CNO)
//撤销外键和补充外键
alter table sc drop constraint constraint_name
alter table sc add constraint FK_SC_S
FOREIGN KEY(SNO) REFERENCES S ON DELETE CASCADE
===========================数据的插入、修改和删除更新==============================================
//插入数据：
insert into sc (SNO,SNAME,AGE,SEX,DNEAME)values('s10','刘海','19','M','计算机')
//修改数据：
update s set age = age +1
//删除数据：
delete from s where SNO = 's10'
=====================================数据查询======================================================
select SNO,SNAME FROM S WEHRE DNAME = '计算机'
select SNO,AGE,2018-AGE AS 出生年份 FROM S 
select * from s where AGE>20 and DNAME = '计算机' 
select * from s where sname like '%李%'//模糊查询
///多表连接查询
//查看所有学生信息和他们的课程号和得分
select S.*,SC.CNO,SC.SCORE
from S,SC 
where S.SNO=SC.SNO
//对同一个表进行连接查询(一个表与自己连接)，比较绕（求出每门课的间接先行课，即它的先行课的先行课）
SELECT FIRST.CNO,SECOND.PRE_CNO                      c表数据  CNO  CNAME CREDIT  PRE_CNO
          FROM C AS FIRST,                                     C1                 
               C AS SECOND//断点                               C2                  C1
WHERE FIRST.PRE_CNO=SECOND.CNO                                 C3                  C1
                                                               C4                  C2
///集合查询
//查询选修了课程代号C4或C2的学生的学号和姓名
SELECT S.SNO,S.SNAME
      FROM S,SC
WHERE S.SNO=SC.SNO AND CNO = 'C4'
UNION
SELECT S.SNO,S.SNAME
      FROM S,SC
WHERE S.SNO=SC.SNO AND CNO = 'C2'
///嵌套查询
//查询选修了电子学课程的学生学号和姓名 s表中是学生的信息，c表是课程信息，sc表是学生的成绩单
SELECT SNO,SNAME 
       FROM S
WHERE SNO IN
(SELECT SNO 
        FROM SC
WHERE CNO IN
(SELECT CNO 
        FROM C
WHERE CNAME='电子学'))
//使用exist查询
SELECT SNAME
FROM S
WHERE EXISTS
(SELECT * 
FROM SC
WHERE S.SNO=SC.SNO AND CNO='C4')
==============================================聚合函数=============================================
select AVG(SCORE) FROM SC//计算分数平均值
SELECT COUNT(DISTINCT CNO) FROM C//计算课程的个数
SELECT CNO,COUNT(SNO) FROM SC GROUP BY CNO//利用group by查询选修课的课程号和选修该课程的人数
SELECT SNO FROM SC GROUP BY SNO HAVING COUNT(*)>1//利用having语句挑选sno重复超过1次的sno
SELECT SNO,SCORE FROM SC ORDER BY SCORE DESC//ORDER排序语句
//按课程号排序统计各门课程的最高、最低和平均成绩
SELECT CNO,MAX(SCORE) AS MAX,MIN(SCORE) AS MIN,AVG(SCORE) AS AVG
FROM SC
GROUP BY CNO
HAVING CNO NOT IN
(SELECT CNO FROM SC WHERE SCORE IS NULL)
ORDER BY CNO 
//   count(*) 跟 count(1) 的结果一样，都包括对NULL的统计，而count(column) 是不包括NULL的统计，计算出表中所有行数。
selelct 常量 from ... 对应所有行，返回的永远只有一个值，即常量 。所以正常只会用来判断是否有还是没有（比如exists子句）。而select * from ... 是返回所有行的所有列。 
select count(*)返回所有满足条件的记录数，此时同select sum(1) 
================================================视图管理===========================================
视图是一个虚拟表，只能查询，数据来自实体表。包括可更新和不可更新（包含聚合函数）两种
优点：（1）定制用户数据（2）简化数据操作，例如很复杂的聚合函数（3）有聚合函数的不可更改数据，保护数据安全性
（4）合并分离的数据，创建分区视图。
//创建视图CREAT VIEW 视图名 AS (SELECT 语句)
//删除视图DROP VIEW 视图名
//可以对视图使用对表的所有查询语句
======================================备份和还原数据库=============================================
备份数据库很简单
恢复数据库步骤：（1）还原为数据库后的数据库名改为你所要还原的数据库名
（2）选择还原从设备
（3）选择设备，一定要选择到文件名
（4）选项，注意为物理文件名路径为\x(你的microsoft sql server文件夹所在盘):\Microsoft SQL Server\MSSQL\Data\数据库名.mdf和\x(你的microsoft sql server文件夹所在盘):\Microsoft SQL Server\MSSQL\Data\数据库名.ldf